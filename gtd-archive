#!/usr/bin/env bash
# Read the man page for this script by running perldoc on it.

# Stop the script if any command exits with non-zero exit status and
# isn't caught (e.g. by && or ||).
set -e

# Error if any variables are undefined.
set -u

# error "error string"
# Given a string, outputs the string and exits the script with a non-zero
# status.  Used to report errors.  The script will exit before error exits
# with non-zero status, and set -e above will then abort the script.
#
# Example
# do_something || error "something failed!"
#
error() {
    echo "$@" >&2
    exit 1
}

# When you change this, change the POD docs below too, and vice versa
USAGE="usage: $(basename "$0") project|reference file_or_directory [file_or_directory ...]"

# Parse command line options.
# Colon after a letter means it has an argument, otherwise it's a flag.
# e.g. "d:" means you expect "-d arg", "v" means you expect "-v".
while getopts hv OPT; do
    case "$OPT" in
        h)  # help
            perldoc "$0"
            exit 0
            ;;
        v) # script version
            echo "$(basename "$0") version 0.1"
            exit 0
            ;;
        \?) # Unexpected argument - usage error
            # getopts issues an error message
            echo "$USAGE" >&2
            exit 1
            ;;
    esac
done

# Remove the switches we parsed above.
shift $((OPTIND - 1))

# We want at least one non-option argument.
# Remove this block if you don't need it.
if [ $# -eq 0 ]; then
    echo "$USAGE" >&2
    exit 1
fi

# Access additional arguments as usual through
# variables $@, $*, $1, $2, etc.

# Script goes here

# See what we're moving
thing_type="$1" ; shift

# Set up the origin and destination directories based on the type of thing
# we're moving.
case "$thing_type" in
    project)
        origin_dir="$(gtd-config-read project_support_directory)"
        archive_dir="$(gtd-config-read project_archive_directory)"
        ;;
    reference)
        origin_dir="$(gtd-config-read reference_materials_directory)"
        archive_dir="$(gtd-config-read reference_materials_archive_directory)"
        ;;
    *)
        echo "$USAGE" >&2
        exit 1
        ;;
esac

test -d "$origin_dir" || error "Error: $thing_type directory not found: $origin_dir"
cd "$origin_dir"
archive_dir="$(gtd-config-read project_archive_directory)"
test -d "$archive_dir" || error "Archive $thing_type directory not found: $archive_dir"

# Move the thing. We loop to support multiple things, as long as they're in the
# same directory.
for thing_to_move in "$@" ; do
    mv "$thing_to_move" "$archive_dir"
done

# Docs. Read by runing perldoc on this file
: <<END_OF_DOCS
=head1 NAME

gtd-archive - Archive a project or reference item

=head1 SYNOPSIS

    # Move an old project directory (or file) to the archive
    gtd archive project "Write iOS GTD App"

=head1 OPTIONS

=head1 DESCRIPTION

Moves the specified file or folder from the project or reference directory (as
configured in the gtd config file, ~/.config/gtd/config by default) to the
project or reference archive directory.

The name of the file or directory must, unfortunately, be exact. Thus, it's
usually easiest to cd into the directory first so that you can use tab
completion and/or wildcards.

The support and archive folders, as specified in the gtd config file must
already exist. If one or the other does not, C<gtd archive> will exit with an
error.

=cut
END_OF_DOCS

